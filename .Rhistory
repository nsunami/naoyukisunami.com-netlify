group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = as_datetime("2020-1-1") + days(yday(date)), y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = as_datetime("2020-1-1") + days(yday(date)), y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = plot_date, y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = plot_date, y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Load Libraries
library(tidyverse)
library(lubridate)
library(gtrendsR)
library(here)
# API Code from GTrend
filename <- "Google Trend - Gaming.csv"
# Topics:
#   - Video Game (%2Fm%2F01mw1)
#   - Game (%2Fm%2F03bt1gh)
# Get the gtrend data
video_game_topic_id <- "%2Fm%2F01mw1"
video_game_gtrend <- gtrends(keyword = video_game_topic_id,
onlyInterest = TRUE, geo = "US")
# Get a tibble from gtrend list
video_game_gtrend_interests <- video_game_gtrend[["interest_over_time"]] %>%
as_tibble() %>%
filter(year(date) %in% 2016:2020)
# Save out as a CSV
write_csv(video_game_gtrend_interests, here("static/data/video_game_gtrend.csv"))
# Load stay-at-home data from Wikipedia
stay_home_dates <- read_csv(here("static/data/wikipedia.csv"),
col_types = list()) # load with auto col types
# Get the df showing how many states are stay-at-home at an given date
stayathome_df <- stay_home_dates %>%
select(-Stateofemergencydeclared) %>%
pivot_longer(c(Stayathomeordered, Datelifted),
values_to = "date", names_to = "Event") %>%
arrange(date) %>%
mutate(weight = case_when(Event == "Stayathomeordered" & is.na(date) == FALSE ~ 1,
Event == "Datelifted" & is.na(date) == FALSE ~ -1)) %>%
mutate(n_stayathome = cumsum(weight)) %>%
# When multiple states declare stay-at-home, we want to sum the number
group_by(date) %>% slice_tail() %>%
# We only need date and n_stayathome
select(date, n_stayathome)
## Combine the stayathome df with the google, fill downward
vg_home_df <- video_game_gtrend_interests %>%
full_join(stayathome_df, by = "date") %>%
drop_na(date) %>%
arrange(date) %>%
mutate(plot_date = as_datetime("2020-1-1") + days(yday(date)))
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = plot_date, y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = plot_date, y = hits,
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = plot_date, y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = plot_date, y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(size = 1.5, alpha = .7, na.rm = TRUE)
vg_home_df
View(vg_home_df)
video_game_gtrend_interests
vg_home_df
## Combine the stayathome df with the google, fill downward
vg_home_df <- video_game_gtrend_interests %>%
full_join(stayathome_df, by = "date") %>%
drop_na(date) %>%
arrange(date) %>%
mutate(plot_date_stayathome = case_when(!is.na(n_stayathome) ~ as_datetime("2020-1-1") + days(yday(date))))
vg_home_df
## Combine the stayathome df with the google, fill downward
vg_home_df <- video_game_gtrend_interests %>%
full_join(stayathome_df, by = "date") %>%
drop_na(date) %>%
arrange(date) %>%
mutate(plot_date_stayathome = case_when(!is.na(n_stayathome) ~ as_datetime("2020-1-1") + days(yday(date))),
plot_date_hits = case_when(!is.na(hits) ~ as_datetime("2020-1-1") + days(yday(date))))
## Combine the stayathome df with the google, fill downward
vg_home_df <- video_game_gtrend_interests %>%
full_join(stayathome_df, by = "date") %>%
drop_na(date) %>%
arrange(date) %>%
mutate(plot_date = as_datetime("2020-1-1") + days(yday(date)),
plot_date_stayathome = case_when(!is.na(n_stayathome) ~ plot_date),
plot_date_hits = case_when(!is.na(hits) ~ plot_date))
vg_home_df
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = plot_date, y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(aes(x = plot_date_hits), size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(x = plot_date, y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(aes(x = plot_date_hits), size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(x = plot_date_stayathome,y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(aes(x = plot_date_hits), size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(x = plot_date_stayathome,y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12) %>%
# missing value warning suppressed
suppressWarnings()
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(aes(x = plot_date_hits), size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(x = plot_date_stayathome,y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12)
stayathome_df
## Combine the stayathome df with the google, fill downward
vg_home_df <- video_game_gtrend_interests %>%
full_join(stayathome_df, by = "date") %>%
drop_na(date) %>%
arrange(date) %>%
fill(n_stayathome, "down") %>%
mutate(plot_date = as_datetime("2020-1-1") + days(yday(date)),
plot_date_stayathome = case_when(!is.na(n_stayathome) ~ plot_date),
plot_date_hits = case_when(!is.na(hits) ~ plot_date))
## Combine the stayathome df with the google, fill downward
vg_home_df <- video_game_gtrend_interests %>%
full_join(stayathome_df, by = "date") %>%
drop_na(date) %>%
arrange(date) %>%
fill(n_stayathome, .direction = "down") %>%
mutate(plot_date = as_datetime("2020-1-1") + days(yday(date)),
plot_date_stayathome = case_when(!is.na(n_stayathome) ~ plot_date),
plot_date_hits = case_when(!is.na(hits) ~ plot_date))
?fill
# Load Libraries
library(tidyverse)
library(lubridate)
library(gtrendsR)
library(here)
# API Code from GTrend
filename <- "Google Trend - Gaming.csv"
# Topics:
#   - Video Game (%2Fm%2F01mw1)
#   - Game (%2Fm%2F03bt1gh)
# Get the gtrend data
video_game_topic_id <- "%2Fm%2F01mw1"
video_game_gtrend <- gtrends(keyword = video_game_topic_id,
onlyInterest = TRUE, geo = "US")
# Get a tibble from gtrend list
video_game_gtrend_interests <- video_game_gtrend[["interest_over_time"]] %>%
as_tibble() %>%
filter(year(date) %in% 2016:2020)
# Save out as a CSV
write_csv(video_game_gtrend_interests, here("static/data/video_game_gtrend.csv"))
# Load stay-at-home data from Wikipedia
stay_home_dates <- read_csv(here("static/data/wikipedia.csv"),
col_types = list()) # load with auto col types
# Get the df showing how many states are stay-at-home at an given date
stayathome_df <- stay_home_dates %>%
select(-Stateofemergencydeclared) %>%
pivot_longer(c(Stayathomeordered, Datelifted),
values_to = "date", names_to = "Event") %>%
arrange(date) %>%
mutate(weight = case_when(Event == "Stayathomeordered" & is.na(date) == FALSE ~ 1,
Event == "Datelifted" & is.na(date) == FALSE ~ -1)) %>%
mutate(n_stayathome = cumsum(weight)) %>%
# When multiple states declare stay-at-home, we want to sum the number
group_by(date) %>% slice_tail() %>%
# We only need date and n_stayathome
select(date, n_stayathome)
## Combine the stayathome df with the google, fill downward
vg_home_df <- video_game_gtrend_interests %>%
full_join(stayathome_df, by = "date") %>%
drop_na(date) %>%
arrange(date) %>%
fill(n_stayathome, .direction = "down") %>%
mutate(plot_date = as_datetime("2020-1-1") + days(yday(date)),
plot_date_stayathome = case_when(!is.na(n_stayathome) ~ plot_date),
plot_date_hits = case_when(!is.na(hits) ~ plot_date))
# Plot
vg_home_df %>%
# the x-axis is the day of the year. Set year to 2020 for plotting
# yday() gets the order of the date in a given year. days() converts the integer to interval obj
# adding them up gives the hypothetical day of the year for plotting
ggplot(aes(y = hits,
group = factor(year(date)),
color = factor(year(date)))) +
# Line for the gtrend scores
geom_line(aes(x = plot_date_hits), size = 1.5, alpha = .7, na.rm = TRUE)  +
# Line for the stay-at-home order
geom_line(aes(x = plot_date_stayathome,y = n_stayathome*sec_axis_scaling, color = NULL),
color = "gray", size = 1.2, alpha = .8, na.rm = TRUE) +
# Labels
#   Y-axis
ylab("Trend Scores for \"Video game\" (US)") +
#   Second Y-axis
scale_y_continuous(sec.axis = sec_axis(~./sec_axis_scaling,
name = "Number of Stay-At-Home States")) +
#   X-axis
scale_x_datetime(date_labels = "%b", name = "Month", date_breaks = "1 month") +
#   Caption
labs(caption = "Source: Google Trends (https://trends.google.com/), Wikipedia") +
#   Legend Title
scale_color_discrete(name = "Year") +
# Theme
theme_classic(base_size = 12)
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
